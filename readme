### Reading for Checked VS Unchecked Exception ###

Checked Exception -
the one which are checked at compile time. Checked exceptions are exceptions that JAVA makes you deal with one way or another in compile time.
It will ask you to throw an exception for the class at compile time by showing error markings so that you either surround that block with try catch
and add your custom method in catch block or you just add "throws CardNotCreatedException" in the method signature like done for (CardNotCreatedException)

Example:

public static void main(String args)
{
      readFile(test.txt);
}

public void readFile(String filename)
{
    FileReader reader = new FileReader(filename); // Java shows a read underline for this statement and asks us to explicitly throw error at compile time.
}

=============== So we do this ===============

public static void main(String args) throws FileNotFoundException
{
      readFile(test.txt);
}

public void readFile(String filename) throws FileNotFoundException
{
    FileReader reader = new FileReader(filename);
}

================= OR =========================

public static void main(String args)
{
      readFile(test.txt);
}

public void readFile(String filename)
{
    try
    {
        FileReader reader = new FileReader(filename);
    }
    catch(FileNotFoundException fnfe)
    {
        System.out.println("File does not exists");
    }
}



Unchecked Exception -
Are the ones where the method could throw NullPointerException but java does not give any compilation error.
It compiles file and only explodes when we run it. Its because NullpointerException is an unchecked exception. Java doesn't make us
catch it with a try catch block, it doesn't let us declare it in the method signature that we might throw nullPointerException.

Example:

public static void main(String args)
{
      String name = null;
      printName(name);
}

public void printName(String name)
{
    System.out.println(name); // Throws NullPointerException at runtime. Java does not provide us any clue at compile time to surround this with try catch or throw it in the method signature.
}

===== In this case we can manually surround with try catch or throw in method signature like we did for checked exception ======

But how do we understand which ones are checked and which ones are unchecked exception ?

Let's check exception hierarchy in JAVA
Throwable - has two categories - Error and Exception

Unchecked - Anything that comes under runtime exception and all subclasses of runtime exception is a unchecked exception
Checked - Everything including Exception class except Runtime are checked exception.

                        Throwable
         Error                              Exception
                                 1. RunTime Exception           2. SQLException/IOException/MalformedURLException/etc
                                 NullPointer
                                 ClassCast


Reference :
https://www.youtube.com/watch?v=bCPClyGsVhc&ab_channel=CodingwithJohn



#### Entity LifeCycle ###

All entities are stored in Persistence Context in Spring APP

Transient -----> Managed -----> DB

Transient is the state of the entity before calling save/delete
Managed is the state when the entity is saved / deleted - this is the time when it enters the Persistence Context.

From Managed State we can do two things:
( Any changes done to the entities in managed state goes straight into the DB. )
1. Removed -
    We can remove the entity from Persistence context by calling Remove() method
    Or we can keep by calling persist(entity) method.
2. Detached
    We can merge(entity)
    or
    We can detach(entity), evict(entity), clear(), close()

When the changes are in DB after managed state activities are done, we can query DB like below :
1. find(class, id)
2. flush()


### Repositories

We create Repositories of the entity which we want to interact with DB directly.
While creating the repository interface, we extend the interface class with JPARepository and pass the entity type along with the primary key datatype
Like this :
@Repository
public interface IEmployeeRepo extends JpaRepository<Employee, Long> {}

This definition creates the repository of that entity and provides implementation of crud operations on it along with custom implementation
defined specific to the Entity.



### AOP - Aspect Oriented Programming ###

Adding functionality to code without changing the code.
Example : Using @Transactional Annotation, we are adding the functionality of Transactions without making any changes to the code/method.

It creates modularity by allowing the separation of cross-cutting concerns.